<?php
/*
 * This file is part of the sonata project.
 *
 * (c) Thomas Rabaix <thomas.rabaix@sonata-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\ProductBundle\Entity;

use Sonata\Component\Product\ProductInterface;
use Sonata\Component\Order\OrderInterface;
use Sonata\Component\Order\OrderElementInterface;
use Sonata\Component\Delivery\DeliveryInterface;
use Sonata\Component\Product\ProductProviderInterface;
use Sonata\Component\Basket\BasketElementInterface;
use Sonata\Component\Basket\BasketInterface;

use Symfony\Component\Form\FormBuilder;

use Sonata\ProductBundle\Model\BaseProductProvider;
use Sonata\Component\Product\ProductManagerInterface;
/**
 * This file has been generated by the Sonata product generation command ( http://sonata-project.org/ )
 *
 * References :
 *   custom repository : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en#querying:custom-repositories
 *   query builder     : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/query-builder/en
 *   dql               : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/dql-doctrine-query-language/en
 *
 * @author <yourname> <youremail>
 */
class {{ product }}ProductProvider extends BaseProductProvider
{

    /**
     *
     * @return the name of the base controller
     */
    public function getBaseControllerName()
    {
        return 'SonataProductBundle:Amazon';
    }

    /**
     * This function return the form used in the product view page
     *
     * @param \Sonata\Component\Product\ProductInterface $product
     * @param \Symfony\Component\Form\FormBuilder $formBuilder
     * @param array $options
     * @return void
     */
    public function defineAddBasketForm(ProductInterface $product, FormBuilder $formBuilder, array $options = array())
    {
        // create the product form
        $formBuilder
            ->add('quantity', 'integer')
            ->add('productId', $product->getId());
    }


    /**
     * @param \Sonata\Component\Basket\BasketElementInterface $product
     * @param \Symfony\Component\Form\FormBuilder $formBuilder
     * @param array $options
     * @return void
     */
    public function defineBasketElementForm(BasketElementInterface $basketElement, FormBuilder $formBuilder, array $options = array())
    {
        $formBuilder
            ->add('delete', 'checkbox')
            ->add('quantity', 'integer')
            ->add('productId', $basketElement->getProductId());

    }

    /**
     * return an array of errors if any, you can also manipulate the basketElement if require
     * please not you always work with a clone version of the basketElement.
     *
     * If the basket is valid it will then replace the one in session
     *
     * @param  $basketElement
     * @return array
     */
    public function validateFormBasketElement($basketElement)
    {
        $errors = parent::validateFormBasketElement($basketElement);

        // add here your own validation

        return $errors;
    }
}