<?php
/*
 * This file is part of the sonata project.
 *
 * (c) Thomas Rabaix <thomas.rabaix@sonata-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\ProductBundle\Entity;

use Application\Sonata\ProductBundle\Entity\{{ product }}Repository;
use Application\Sonata\ProductBundle\Product\{{ product }}\{{ product }}AddBasket;
use Application\Sonata\ProductBundle\Product\{{ product }}\{{ product }}AddBasketForm;

/**
 * This file has been generated by the Sonata product generation command ( http://sonata-project.org/ )
 *
 * References :
 *   custom repository : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en#querying:custom-repositories
 *   query builder     : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/query-builder/en
 *   dql               : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/dql-doctrine-query-language/en
 *
 * @author <yourname> <youremail>
 */
class {{ product }}Repository extends \Sonata\ProductBundle\Entity\BaseProductRepository
{

    public function getBasketElementClass()
    {

        return 'Application\\ProductBundle\\Product\\{{ product }}\\{{ product }}BasketElement';
    }

    public function getAddBasketClass()
    {

        return 'Application\\ProductBundle\\Product\\{{ product }}\\{{ product }}AddBasket';
    }

    public function getAddBasketFormClass()
    {

        return 'Application\\ProductBundle\\Product\\{{ product }}\\{{ product }}AddBasketForm';
    }

    /**
     * generate the field group use to render the basket element line in the basket form
     *
     * @param  $fieldGroup
     * @return Symfony\Component\Form\FieldGroup
     */
    public function generateFieldGroupBasketElement(\Symfony\Component\Form\FieldGroup $fieldGroup, $basketElement)
    {
        // required widgets
        $fieldGroup->add(new \Symfony\Component\Form\CheckboxField('delete'));
        $fieldGroup->add(new \Symfony\Component\Form\HiddenField('productId'));
        $fieldGroup->add(new \Symfony\Component\Form\TextField('quantity'));


        // add here your custom widget
        //$fieldGroup->add(new \Symfony\Component\Form\CheckboxField('custom_option1'));


        return $fieldGroup;
    }

    /**
     * return an array of errors if any, you can also manipulate the basketElement if require
     * please not you always work with a clone version of the basketElement.
     *
     * If the basket is valid it will then replace the one in session
     *
     * @param  $basketElement
     * @return array
     */
    public function validateFormBasketElement($basketElement)
    {

        $errors = parent::validateFormBasketElement($basketElement);

        // add here your own validation

        return $errors;
    }
}